#	Trim jumps to next instruction
jmp %1
%1:
=
%1:

# Double exchanges
xgdx; XtoD
xgdx; DtoX
=
;

# Double exchanges
xgdx
xgdx
=
;

# Make exchange and push more efficient
xgdx; XtoD
pshb
psha
=
pshx
xgdx; XtoD

xgdx; DtoX
pshb
psha
=
pshx
xgdx; XtoD

# Store and reload
std %1
ldd %1
=
std %1

stx %1
ldx %1
=
stx %1


# Some classes of compare
# Simple check on 8bit versus 0 (safe only due to compiler behaviour)
clra
ldab %1
jne %2
L%3
ldd %4
=
ldab %1
jne %2
L%3
ldd %4

clra
ldab %1
jne %2
ldd %3
=
ldab %1
jne %2

# Pointless stack
pshb
pulb
=
;

pshx
pulx
=
;

pshb
psha
pula
pulb
=
;

pula
pulb
pshb
psha
ldd %1
=
ldd %1

pula
pulb
pshb
psha
clra
ldab %1
=
clra
ldab %1

pula
pulb
pshb
psha
clra
clrb
=
clra
clrb

#	Turn pula/pulb/xgdx into pulx. This should be safe without a check
#	we then load D but might need a hint adding
pula
pulb
xgdx; DtoX
=
pulx

#	DP optimized constants
#
clra
ldab #$01
=
ldd @one

addd #$0001
=
addd @one

# We generate clra/clrb in some cases but we can't blindly do this
# because clra/clrb affects flags differently
ldd #$0000
=
ldd @zero

ldd #$0001
=
ldd @one

subd #$0001
=
subd @one

ldx #$0000
=
ldx @zero

ldx #$0001
=
ldx @one

#	Branches
#

%1:
	jmp %2
%3:
	jmp %1
=
%1:
%3:
	jmp %2

# Review more conditions

jne %1
jmp %2
%1:
=
jeq %2
%1:

jeq %1
jmp %2
%1:
=
jne %2
%1:

jcc %1
jmp %2
%1:
=
jcs %2
%1:

jcs %1
jmp %2
%1:
=
jcc %2
%1:


# Fix up some of the X cases

# Push and then invalidate D so can use X
ldd %1
pshb
psha
invalid X,D,P
=
ldx %1
pshx
invalid X,D,P

# Push and then invalidate D so can use X single arg entry, with label
ldd %1
pshb
psha
%2:
invalid X,D,P
=
ldx %1
pshx
%2:
invalid X,D,P

# Stack via X

ldd %1
pshb
psha
invalid X,D,P
=
ldx %1
pshx

# Clean up trailing references from things like p++;
ldd %1
L%2
ldd %3
=
L%2
ldd %3

ldd %1
ldd %2
=
;

# n++/n-- with unused result

ldd %1
pshb
psha
addd %2
std %1
pula
pulb
ldd %3
=
ldd %1
addd %2
std %1
ldd %3

# Optimize a few pull sequences where we can see X is not live

pula
pulb
L%1:
tsx
=
pulx
L%1:
tsx

pula
pulb
tsx
=
pulx
tsx

pula
pulb
pulx
=
pulx
pulx

pula
pulb
invalid X,D,P
=
pulx
;invalid XDP

ldd %1
pshb
psha
tsx
ldd %2
=
ldx %1
pshx
tsx
ldd %2

# Clean up invalid markers
invalid D,P
=
;invalid DP

invalid X,D,P
=
;invalid XDP

# Some useful tricks with comparisons. Where the comparison sets the flags
# and the next thing we do is to do a conditional based on them we can
# eliminate the test function. Look at the others as we clean them up
# in the compiler

jsr booleq
jeq %1
=
jne %1

jsr boolne
jne %1
=
jne %1

# Clean up tsx tsx

tsx
tsx
=
tsx

# We generate this sequence to compare

subd #$0000
=
subd @zero

subd #$0001
=
subd @one

# We have a more general issue of cases where we shouldn't go via the
# stack at all to address - eg 16bit compare with static. Until we fix
# the compiler address them here

ldd %1
pshb
psha
ldd %2
tsx
subd 1,x
pulx
=
ldd %2
subd %1

ldd %1
pshb
psha
ldd %2
tsx
addd 1,x
pulx
=
ldd %1
addd %2

ldd %1
pshb
psha
ldd %2
subd 1,x
pulx
=
ldd %2
subd %1

ldd %1
pshb
psha
ldd %2
addd 1,x
pulx
=
ldd %1
addd %2




# Spot logic operations where we can use x to avoid going over the stack

ldd %1
pshb
psha
ldd %2
tsx
=
ldx %1
pshx
ldd %2
tsx


# Repeat clears for 8bit work

clra
ldab %1
clra
=
clra
ldab %1

clra
clrb
stab %1
tsx
ldd %2
=
clrb
stab %1
tsx
ldd %2

clra
clrb
stab %1
ldd %2
=
clrb
stab %1
ldd %2

clra
clrb
stab %1
ldd %2
=
clrb
stab %1
ldd %2

# Pointer chases that can use X directly

ldd %1
std @tmp
ldx @tmp
ldd %2
=
ldx %1
ldd %2

ldd %1
std @tmp
ldx @tmp
clra
ldab%2
=
ldx %1
clra
ldab %2

ldd %1
pshb
psha
std @tmp
ldx @tmp
clra
ldab %2
=
ldx %1
pshx
clra
ldab %2

ldd %1
pshb
psha
tsx
clra
ldab %2
pulx
stab %3
=
ldx %1
pshx
tsx
clra
ldab %2
pulx
stab %3

ldd %1
pshb
psha
tsx
ldd %2
pulx
std %3
=
ldx %1
pshx
tsx
ldd %2
pulx
std %3

ldd %1
pshb
psha
clra
clrb
pulx
=
ldx %1
clra
clrb

# Byte increments
ldd @one
addb %1
stab %1
=
inc %1
ldab %1
clra

# Call cleanups(no internal X using helpers start with an underscore) 

ldd %1
pshb
psha
jsr _%2
=
ldx %1
pshx
jsr _%2

