#	This is fairly ineffective, we need a proper optimizer that can do
#	things like live value and constant tracking to make a real dent
#	in the 6800 output
#
#
#	Patterns for tidying up branching and the like
#
#	Trim jumps to next instruction
	jmp %1
%1:
=
%1:

	jmp %2
%1:
%2:
=
%1:
%2:

	jmp %3
%1:
%2:
%3:
=
%1:
%2:
%3:

#	And terminal jsr rts
	jsr %1
	rts
=
	jmp %1

#
#	Terminal load
#
	ldaa %1
	ldab %2
	;invalid XDP
=
	;invalid XDP

	clra
	ldab %1
	;invalid XDP
=
	;invalid XDP

	clra
	clrb
	;invalid XDP
=
	;invalid XDP

	ldaa %1
	tab
	;invalid XDP
=
	;invalid XDP

	ldaa %1
	ldab %2
	;invalid DP
=
	;invalid DP

	clra
	ldab %1
	;invalid DP
=
	;invalid DP

	clra
	clrb
	;invalid DP
=
	;invalid DP

	ldaa %1
	tab
	;invalid DP
=
	;invalid DP

# Shorten some other calls with helper variants
# bnega only inspects b and changes a and b
	clra
	ldab %1
	jsr bnega
=
	ldab %1
	jsr bnega

# Unneeded reloads (NOTWORKING)
	staa %1
	stab %2
	;invalid DP
	ldaa %1
	ldab %2
=
	staa %1
	stab %2
	;invalid DP

	staa %1
	stab %2
	;invalid XDP
	ldaa %1
	ldab %2
=
	staa %1
	stab %2
	;invalid XDP

# Silly logic removals
	clra
	ldab #1
	staa @tmp1
	orab @tmp1
	jne %1
=
	clra
	ldab #1
	jne %1

# Some trivial optimizations for clra/clrb cases
	clra
	ldab #$01
	stab %1
	clra
	clrb
=
	clra
	ldab #1
	stab %1
	decb

	clra
	clrb
	stab %1
	clra
	clrb
=
	clra
	clrb
	stab %1

	clra
	ldab #$01
	staa %1
	stab %1+1
	clra
	clrb
=
	clra
	ldab #$01
	staa %1
	stab %1+1
	decb

	clra
	clrb
	staa %1
	stab %2
	clra
	clrb
=
	clra
	clrb
	staa %1
	stab %2

# And with D,P
	clra
	clrb
	stab %1
	;invalid DP
	clra
	clrb
=
	clra
	clrb
	stab %1
	;invalid DP

	clra
	ldab #$01
	staa %1
	stab %2
	;invalid DP
	clra
	clrb
=
	clra
	ldab #$01
	staa %1
	stab %2
	;invalid DP
	decb

	clra
	clrb
	staa %1
	stab %2
	;invalid DP
	clra
	clrb
=
	clra
	clrb
	staa %1
	stab %2
	;invalid DP

# And with X,D,P
	clra
	clrb
	stab %1
	;invalid XDP
	clra
	clrb
=
	clra
	clrb
	stab %1
	;invalid XDP

	clra
	ldab #$01
	staa %1
	stab %2
	;invalid XDP
	clra
	clrb
=
	clra
	ldab #$01
	staa %1
	stab %2
	;invalid XDP
	decb

	clra
	clrb
	staa %1
	stab %1
	;invalid XDP
	clra
	clrb
=
	clra
	clrb
	sta %1
	stb %1
	;invalid XDP

	clra
	clra
=
	clra

	clrb
	pshb
	;invalid DP
	clrb
	pshb
=
	clrb
	pshb
	pshb
	;invalid DP

	clra
	pshb
	;invalid DP
	clra
=
	clra
	pshb
	;invalid DP

	clra
	clrb
	staa %1
	stab %2
	;invalid DP
	clra
	clrb
=
	clra
	clrb
	staa %1
	stab %2
	;invalid DP

	clra
	clrb
	staa %1
	stab %2
	;invalid XDP
	clra
	clrb
=
	clra
	clrb
	staa %1
	stab %2
	;invalid XDP

# Similar idea for constants
	ldab #%1
	pshb
	;invalid DP
	ldab #%1
=
	ldab #%1
	pshb
	;invalid DP

# Where logic tells us clr is not needed
	suba %1
	sbcb %2
	jne %2
	clra
=
	suba %1
	sbcb %2
	jne %2

# Useful overlaps to spot
	clrb
	pshb
	ldab #$FF
=
	clrb
	pshb
	decb

# Store and reload
	staa %1
	stab %2
	ldaa %1
	ldab %2
=
	staa %1
	stab %2

	stx %1
	ldx %1
=
	stx %1

	staa %1
	stab %2
	;invalid DP
	ldaa %1
	ldab %2
=
	staa %1
	stab %2

	staa %1
	stab %2
	;invalid XDP
	ldaa %1
	ldab %2
=
	staa %1
	stab %2

# Pointless stack
	pshb
	pulb
=
	;

	pshb
	psha
	pula
	pulb
=
	;

	pula
	pulb
	pshb
	psha
	ldaa %1
	ldab %2
=
	ldaa %1
	ldab %2

	pula
	pulb
	pshb
	psha
	clra
	ldab %1
=
	clra
	ldab %1

	pula
	pulb
	pshb
	psha
	clra
	clrb
=
	clra
	clrb

# Silly reloads (safe as we don't load X)
	staa %1
	stab %2
	ldaa %1
	ldab %2
=
	staa %1
	stab %2

#	Branches
#

%1:
	jmp %2
%3:
	jmp %1
=
%1:
%3:
	jmp %2

# Review more conditions
	jne %1
	jmp %2
%1:
=
	jeq %2
%1:

	jeq %1
	jmp %2
%1:
=
	jne %2
%1:

	jcc %1
	jmp %2
%1:
=
	jcs %2
%1:

	jcs %1
	jmp %2
%1:
=
	jcc %2
%1:


# Clean up trailing references from things like p++;
	ldaa %1
	ldab %2
L%3
	ldaa %4
	ldab %5
=
L%3
	ldaa %4
	ldab %5

	ldaa %1
	ldab %2
	ldaa %3
	ldab %4
=
	ldaa %3
	ldab %4

# n++/n-- with unused result
	ldaa %1
	ldab %1+1
	pshb
	psha
	addb #%2
	adca #%3
	staa %1
	stab %1+1
	pula
	pulb
	ldaa %4
	ldab %5
=
	ldaa %1
	ldab %1+1
	addb #%2
	adca #%3
	staa %1
	stab %1+1
	ldaa %4
	ldab %5

# Clean up tsx tsx

	tsx
	tsx
=
	tsx

# We have a more general issue of cases where we shouldn't go via the
# stack at all to address - eg 16bit compare with static. Until we fix
# the compiler address them here
	ldaa %1
	ldab %2
	pshb
	psha
	ldaa %3
	ldab %4
	tsx
	subb $01,x
	sbca $00,x
	pulx
=
	ldaa %3
	ldab %4
	subb %4
	sbca %3

	ldaa %1
	ldab %2
	pshb
	psha
	ldaa %3
	ldab %4
	tsx
	adcb $01,x
	adda $00,x
	inx
	inx
=
	ldaa %1
	ldab %2
	adcb %4
	adda %3

	ldaa %1
	ldab %2
	pshb
	psha
	ldaa %3
	ldab %4
	subb $01,x
	sbca $00,x
	inx
	inx
=
	ldaa %1
	ldab %2
	subb %4
	sbca %3

	ldaa %1
	ldab %1+1
	pshb
	psha
	ldaa %3
	ldab %4
	addb $01,x
	adca $00,x
	inx
	inx
=
	ldaa %1
	ldab %2
	addb %4
	adca %3

# Repeat clears for 8bit work
	clra
	ldab %1
	clra
=
	clra
	ldab %1

	clra
	clrb
	stab %1
	tsx
	ldaa %2
	ldab %3
=
	clrb
	stab %1
	tsx
	ldaa %2
	ldab %3

	clra
	clrb
	stab %1
	ldaa %2
	ldab %3
=
	clrb
	stab %1
	ldaa %2
	ldab %3

	clra
	clrb
	stab %1
	ldaa %2
	ldab %3
=
	clrb
	stab %1
	ldaa %2
	ldab %3

# Byte increments
	clra
	ldab #$01
	addb %1
	stab %1
=
	inc %1
	ldab %1
	clra

# Subtract clean up
	ldaa %1
	ldab %2
	pshb
	psha
	ldaa %3
	ldab %4
	tsx
	subb $01,x
	sbca $00,x
	ins
	ins
=
	ldaa %3
	ldab %4
	suba %2
	sbca %1

	clra
	ldab %2
	pshb
	psha
	ldaa %3
	ldab %4
	tsx
	subb $01,x
	sbca $00,x
	ins
	ins
=
	ldaa %3
	ldab %4
	suba %2
	sbca #0

	ldaa %1
	ldab %2
	pshb
	psha
	clra
	ldab %4
	tsx
	subb $01,x
	sbca $00,x
	ins
	ins
=
	clra
	ldab %4
	suba %2
	sbca #0


# Optimize common dtox patterns
	ldaa %1,x
	ldab %1+1,x
	jsr dtox
=
	ldx %1,x

	ldaa #>%1
	ldab #<%1
	jsr dtox
=
	ldx #%1

	ldaa _%1
	ldab _%1+1
	jsr dtox
=
	ldx _%1

# Struct offset maths assign 0
	clr @%1
	clr @%1+1
	pula
	pulb
	addb #%2
	adca #%3
	jsr dtox
	ldaa @%1
	ldab @%1+1
	staa %4,x
	stab %4+1,x
	;invalid DP
=
	pula
	pulb
	addb #%2
	adca #%3
	jsr dtox
	clr %4,x
	clr %4+1,x
	;invalid DP

	jsr dtox
	ldaa @tmp2
	ldab @tmp2+1
	staa $01,x
	stab $00,x
=
	jsr dtoxstoretmp2

	jsr dtox
	ldaa @tmp2
	ldab @tmp2+1
	stab $00,x
=
	jsr dtoxstoretmp2b

	jsr dtox
	clra
	ldab $00,x
=
	jsr dtoxldb

	jsr dtox
	ldaa $01,x
	ldab $00,x
=
	jsr dtoxldw

	jsr dtox
	clra
=
	jsr dtoxclra

	staa @tmp
	stab @tmp+1
	ldx @tmp
=
	jsr dtox

	tsx
	ldx $00,x
	ins
	ins
=
	jsr dopulx

	jsr dopulx
	stab $00,x
=
	jsr dopulxstb

	jsr dopulx
	stab $01,x
	staa $00,x
=
	jsr dopulxstd

#
#	We also sometimes push d, clear tmp2 and pop
#
	pshb
	psha
	clra
	clrb
	staa @tmp2
	stab @tmp2+1
	pula
	pulb
=
	clr @tmp2
	clr @tmp2+1


#
#	Clean up store via tmp2 when we have smaller values
#
	pshb
	psha
	clra
	clrb 
	staa @tmp2
	stab @tmp2+1
	pula
	pulb
=
	clr @tmp2
	clr @tmp2+1

	pshb
	psha
	clra
	ldab %1
	staa @tmp2
	stab @tmp2+1
	pula
	pulb
=
	pshb
	ldab %1
	clr @tmp2
	stab @tmp2+1
	pulb

# take the return value store it and push it foo(bar(...
	tsx
	stab $01,x
	staa $00,x
	;invalid DP
	ldaa $01,x
	ldab $00,x
	pshb
	psha
=
	tsx
	jsr storedpush


# Subtract cleanup
#
	ldaa _%1
	ldab _%2
	tsx
	staa @tmp
	stab @tmp+1
	ldaa $00,x
	ldab $00+1,x
	ins
	ins
	subb @tmp
	sbca @tmp+1
=
	subb _%2
	sbca _%1

	ldaa #%1
	ldab #%2
	tsx
	staa @tmp
	stab @tmp+1
	ldaa $00,x
	ldab $00+1,x
	ins
	ins
	subb @tmp
	sbca @tmp+1
=
	subb #%2
	sbca #%1

#
#	8bit post increment (not matching ? FIXME)
#
	ldab %1,x
	stab @tmp1
	incb
	stab %1,x
	ldab @tmp1
=
	ldab %1
	inc %1,x

	ldab _%1
	stab @tmp1
	incb
	stab _%1
	ldab @tmp1
=
	ldab _%1
	inc _%1

#
#	Constant stores to static
#	The rare case we can go via X usefully
#
	clra
	clrb
	staa _%1
	stab _%1+1
	;invalid XDP
=
	clr _%1
	clr _%1+1

	clra
	clrb
	staa _%1
	stab _%1+1
	;invalid DP
=
	clr _%1
	clr _%1+1

#
#	See if we can load via X. There are very few cases we can do this
#	on the 6800 but they are worth looking for
#
	clra
	ldab #$%1
	staa _%2
	stab _%2+1
	;invalid XDP
=
	ldx #$%1
	stx _%2
	;invalid XDP

	clra
	ldab #%1
	staa @%2
	stab @%2+1
	;invalid XDP
=
	ldx #%1
	stx @%2
	;invalid XDP

	ldaa #$%1
	ldab #$%2
	staa _%3
	stab _%3+1
	;invalid XDP
=
	ldx #$%1%2
	stx _%3
	;invalid XDP

	ldaa #$%1
	ldab #$%2
	staa @%3
	stab @%3+1
	;invalid XDP
=
	ldx #$%1%2
	stx @%3
	;invalid XDP

#	Clean up any stray tsx where we removed the code entirely or added
#	one
	tsx
	;invalid XDP
=
	;invalid XDP

############################################################################
#
#	Below this point are rules that want to deal with DP only so we
#	strip the X out of remaining markers. This is a good rule to comment
#	out when debugging rulesets!
#
############################################################################
	;invalid XDP
=
	;invalid DP

# 16bit post increment
	ldaa %1,x
	ldab %1+1,x
	staa @tmp
	stab @tmp+1
	addb #%2
	adca #%3
	staa %1,x
	stab %1+1,x
	ldaa @tmp
	ldab @tmp+1
	;invalid DP
=
	ldaa %1,x
	ldab %1+1,x
	addb #%2
	adca #%3
	staa %1,x
	stab %1+1,x
	;invalid DP

	ldaa %1,x
	ldab %1+1,x
	staa @tmp
	stab @tmp+1
	adda #%2
	staa %1,x
	stab %1+1,x
	ldaa @tmp
	ldab @tmp+1
	;invalid DP
=
	ldaa %1,x
	ldab %1+1,x
	adda #%2
	staa %1,x
	stab %1+1,x
	;invalid DP

#
#	Various common pushes because pushing this is expensive (6 bytes
#	for a 16bit constant or a stack ref - 5 for small values, 4 for
#	zero
#
#	Constant 0
#
	clrb
	clra
	pshb
	psha
	;invalid DP
=
	clra
	psha
	psha
	;invalid DP

#
#	Constant FF00, not that common but it's free
#
	ldaa #$FF
	clrb
	pshb
	psha
	;invalid DP
=
	clra
	psha
	deca
	psha
	;invalid DP

#
#	Constant 0100, not that common but it's free
#
	ldaa #$01
	clrb
	pshb
	psha
	;invalid DP
=
	clra
	psha
	inca
	psha
	;invalid DP

#
#	Constant two bytes the same (usually -1)
#
	ldab #$%1
	tba
	pshb
	psha
	;invalid DP
=
	ldab #$%1
	pshb
	pshb
	;invalid DP

#
#	Clean up tail loads 8bit increment
#
	ldab	@%1
	;invalid DP
=
	;invalid DP

#
#	General tail loads 8 and 16 bit
#	Don't try and clean up tail static loads, we will end up eliminating
#	things like MMIO
#
	ldaa	%1,x
	ldab	%2,x
	;invalid DP
=
	;invalid DP

	clra
	ldab	%2,x
	;invalid DP
=
	;invalid DP

#
#	Stores 8 bit with no trailing use
#
	clra
	ldab %1
	jsr dopulxstb
	;invalid DP
=
	ldab %1
	jsr dopulxstb
	;invalid DP

#
#	Push of 0 that is then replaced by other data
#
	clra
	clrb
	pshb
	psha
	;invalid DP
=
	clra
	psha
	psha
	;invalid DP

#
#	Where we are loading zero via the temp helpers we can avoid
#	the whole push and reload. We want this before pshindvx hides
#	the optimization
#
	pshb
	psha
	clr @%1
	clr @%1+1
	pula
	pulb
=
	clr @%1
	clr @%1+1

#
#	Reorder static cases with no side effects.
#
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa #%2
	ldab #%3
	staa @%4
	stab @%4+1
	pula
	pulb
=
	ldaa #%2
	ldab #%3
	staa @%4
	stab @%4+1
	ldaa %1,x
	ldab %1+1,x	

	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa #%2
	tab
	staa @%3
	stab @%3+1
	pula
	pulb
=
	ldaa #%2
	staa @%3
	staa @%3+1
	ldaa %1,x
	ldab %1+1,x	

#
#	Clear variants
#
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	clrb
	staa @%2
	stab @%2+1
	pula
	pulb
=
	clr @%2
	clr @%2+1
	ldaa %1,x
	ldab %1+1,x	

	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	ldab #%3
	staa @%2
	stab @%2+1
	pula
	pulb
=
	clr @%2
	ldab #%3
	stab @%2+1
	ldaa %1,x
	ldab %1+1,x	

	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa #%3
	clrb
	staa @%2
	stab @%2+1
	pula
	pulb
=
	ldaa #%3
	staa @%2
	clr @%2+1
	ldaa %1,x
	ldab %1+1,x	

#
#	Stores via a stack based pointer - use X when we can
#	16 and 8 and clear variants
#
#	16bit via X
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa #%2
	ldab #%3
	jsr dopulx
	staa %4,x
	stab %4+1,x
=
	ldx %1,x
	ldaa #%2
	ldab #%3
	staa %4,x
	stab %4+1,x

# 16bit via X add const
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa _%2
	ldab _%2+1
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx %1,x
	ldaa _%2
	ldab _%2+1
	staa %3,x
	stab %3+1,x

# 16bit via X A and B same
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa #%2
	tab
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx %1,x
	ldaa #%2
	tab
	staa %3,x
	stab %3+1,x

# 16bit static plus const
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldaa #%2
	ldab #%3
	jsr dopulx
	staa %4,x
	stab %4+1,x
=
	ldx _%1
	ldaa #%2
	ldab #%3
	staa %4,x
	stab %4+1,x

# 16bit static of static
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldaa _%2
	ldab _%2+1
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx _%1
	ldaa _%2
	ldab _%2+1
	staa %3,x
	stab %3+1,x

# 16bit of static A and B same
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldaa #%2
	tab
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx _%1
	ldaa #%2
	tab
	staa %3,x
	stab %3+1,x

# 16bit of X high byte 0 no requirement for keeping D
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	staa %3,x
	stab %3+1,x
	;invalid DP
=
	ldx %1,x
	ldab #%2
	clr %2,x
	stab %3+1,x
	;invalid DP

# 16bit static high byte 0 no requirement for keeping D
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	staa %3,x
	stab %3+1,x
	;invalid DP
=
	ldx _%1
	ldab #%2
	clr %2,x
	stab %3+1,x
	;invalid DP

# 16bit of X low byte 0 no requirement for keeping D
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa #%2
	clrb
	jsr dopulx
	staa %3,x
	stab %3+1,x
	;invalid DP
=
	ldx %1,x
	ldaa #%2
	staa #%3,x
	clr %3+1,x
	;invalid DP

# 16bit of static low byte 0 no requirement for keeping D
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldaa #%2
	clrb
	jsr dopulx
	staa %3,x
	stab %3+1,x
	;invalid DP
=
	ldx _%1
	ldaa #%2
	staa #%3,x
	clr %3+1,x
	;invalid DP

# 16bit of X, clear, no requirement for keeping D
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	clrb
	jsr dopulx
	staa %2,x
	stab %2+1,x
	;invalid DP
=
	ldx %1,x
	clr %2,x
	clr %2+1,x
	;invalid DP

# 16bit of static, clear, no requirement for keeping D
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	clrb
	jsr dopulx
	staa %2,x
	stab %2+1,x
	;invalid DP
=
	ldx _%1
	clr %2,x
	clr %2+1,x
	;invalid DP

#
#	FIXME: look at matching 8bit forms when we know XDP and turning
#
# 8bit of X, no requirement to keep D
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	stab %3,x
	;invalid DP
=
	ldx %1,x
	ldab #%2
	stab %3,x
	;invalid DP

# 8bit of static, no requirement to keep D
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	stab %3,x
	;invalid DP
=
	ldx _%1
	ldab #%2
	stab %3,x
	;invalid DP

# 8bit of X, zero, no requirement to keep D
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	clrb
	jsr dopulx
	stab %2,x
	;invalid DP
=
	ldx %1,x
	clr %2,x
	;invalid DP

# 8bit of static, zero, no requirement to keep D
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	clrb
	jsr dopulx
	stab %2,x
	;invalid DP
=
	ldx _%1
	clr %2,x
	;invalid DP

#
#	Pure 8bit forms
#
# 8bit via X to const
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldab #%2
	jsr dopulx
	stab %3,x
=
	ldx %1,x
	ldab #%2
	stab %3,x

#8bit via X to static
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldab _%2
	jsr dopulx
	stab %3,x
=
	ldx %1,x
	ldab _%2
	stab %3,x

# 8bit static to const
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldab #%2
	jsr dopulx
	stab %3,x
=
	ldx %1,x
	ldab #%2
	stab %3,x

#8bit via static, to static
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldab _%2
	jsr dopulx
	stab %3,x
=
	ldx _%1
	ldab _%2
	stab %3,x

#
#	Cases we need the data still
#
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx %1,x
	ldab #%2
	clr %2,x
	clra
	stab %3+1,x

	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	stab %3,x
=
	ldx %1,x
	ldab #%2
	clr %2,x
	clra
	stab %3+1,x

	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa #%2
	clrb
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx %1,x
	ldaa #%2
	staa #%3,x
	clrb
	clr %3+1,x

# And for static
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx _%1
	ldab #%2
	clr %2,x
	clra
	stab %3+1,x

	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	ldab #%2
	jsr dopulx
	stab %3,x
=
	ldx _%1
	ldab #%2
	clr %2,x
	clra
	stab %3+1,x

	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldaa #%2
	clrb
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx _%1
	ldaa #%2
	staa #%3,x
	clrb
	clr %3+1,x

	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	clrb
	jsr dopulx
	staa %2,x
	stab %2+1,x
=
	ldx _%1
	clr %2,x
	clr %2+1,x
	clra
	clrb

	ldaa _%1
	ldab _%1+1
	pshb
	psha
	clra
	clrb
	jsr dopulx
	stab %2,x
=
	ldx _%1
	clr %2,x
	clra
	clrb

# Seems to be failing FIXME
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	clrb
	jsr dopulx
	staa %2,x
	stab %2+1,x
=
	ldx %1,x
	clr %2,x
	clr %2+1,x
	clra
	clrb

	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	clra
	clrb
	jsr dopulx
	stab %2,x
=
	ldx %1,x
	clr %2,x
	clra
	clrb

# The very common 'push top of stack' forms (being careful that X may not be
# S)
	tsx
	ldaa $00,x
	ldab $00+1,x
	pshb
	psha
=
	jsr pshtop
	tsx

#
#	We often push top, clear tmp2 and pop it. We can do better
#
	jsr pshtop
	tsx
	clra
	clrb
	staa @tmp2
	stab @tmp2+1
	pula
	pulb
=
	clr @tmp2
	clr @tmp2+1
	tsx

#
#	The next batch need expanding to cover cases where they are followed
#	by ld/clr a/b pairs.
#
#	,x
#
	ldaa $00,x
	ldab $00+1,x
	pshb
	psha
=
	jsr pshindvx

#
#	1,x
#
	ldaa $01,x
	ldab $01+1,x
	pshb
	psha
=
	jsr pshindvx1

#
#	2,x
#
	ldaa $02,x
	ldab $02+1,x
	pshb
	psha
=
	jsr pshindvx2

#
#	3,x
#
	ldaa $03,x
	ldab $03+1,x
	pshb
	psha
=
	jsr pshindvx3

#
#	4,
#
	ldaa $04,x
	ldab $04+1,x
	pshb
	psha
=
	jsr pshindvx4

#
#	5,x
#
	ldaa $05,x
	ldab $05+1,x
	pshb
	psha
=
	jsr pshindvx5

#
#	6,x
#
	ldaa $06,x
	ldab $06+1,x
	pshb
	psha
=
	jsr pshindvx6

#
#	7,x
#
	ldab $07,x
	ldaa $07+1,x
	pshb
	psha
=
	jsr pshindvx7

############################################################################
#
#	Below this point are rules that want to deal with discovered
#	as well as actual generated invalid DP markers
#
############################################################################
#
#	Add deducable invalidity markers. Whenever we load A and B we know
#	that we can add an invalid DP marker just before
#
	ldaa %1
	ldab %2
=
%once
	;invalid DP
	ldaa %1
	ldab %2

	clra
	ldab %1
=
%once
	;invalid DP
	clra
	ldab %1

	ldaa %1
	clrb
=
%once
	;invalid DP
	ldaa %1
	clrb

	clra
	clrb
=
%once
	;invalid DP
	clra
	clrb

	ldaa %1
	tab
=
%once
	;invalid DP
	ldaa %1
	tab

#
#
#	Shrink some load forms
#
	clra
	clrb
	tsx
	stab %1,x
	staa %2,x
	;invalid DP
=
	tsx
	clr %1,x
	clr %2,x
	;invalid DP

	clra
	clrb
	stab %1,x
	staa %2,x
	;invalid DP
=
	clr %1,x
	clr %2,x
	;invalid DP

#
#	Store optimisations
#
	clra
	clrb
	staa _%1
	stab _%1+1
	;invalid DP
=
	clr _%1
	clr _%1+1
	;invalid DP

	clra
	clrb
	staa %1,x
	stab %1+1,x
	;invalid DP
=
	clr %1,x
	clr %1+1,x
	;invalid DP


############################################################################
#
#	Below this point are rules that don't want to deal with invalid
#	markers
#
############################################################################
	;invalid DP
=

#
#	Stack via X load
#
	ldaa %1,x
	ldab %1+1,x
	jsr dtox
	ldaa %2,x
	ldab %2+1,x
=
	ldx %1,x
	ldaa %2,x
	ldab %2+1,x

#
#	Store TOS then Push TOS
#
	stab $01,x
	staa $00,x
	pshb
	psha
=
	jsr storepushtop

#
#	Load of TOS
#
	tsx
	ldaa $00,x
	ldab $00+1,x
=
	jsr loadtos

#
#
#
	pshb
	psha
	jsr loadtos
=
	pshb
	psha
	tsx

#
#	Save to top of stack
#
	tsx
	staa $00,x
	stab $01,x
=
	jsr savetos

#
#	Clearing a working temporary then popping
#
	clra
	clrb
	staa @%1
	stab @%1+1
	pula
	pulb
=
	clr @%1
	clr @%1+1
	pula
	pulb

#
#	Minor optimizations
#
#
#	Eliminate load of full register for 8bit push. Keep the clr as we
#	may consume the register
#
	ldaa %1
	ldab %2
	clra
	pshb
=
	ldab %2
	clra
	pshb

#
#	8bit constant argument sets
#
	clrb
	pshb
	clrb
	pshb
=
	clrb
	pshb
	pshb

#
#	tos = call
#
	tsx
	staa $00,x
	stab $00+1,x
=
	jsr storetos

#
#	tos = call then push it
#
	tsx
	stab $01,x
	staa $00,x
	pshb
	psha
=
	jsr storetospush

#
#	Another form that seems to show up
#
	jsr loadtos
	pshb
	psha
=	
	jsr pushtop

#
#	Minor optimisation for pushing and loading
#
	clra
	clrb
	pshb
	psha
	tsx
	ldab %1
=
	clrb
	pshb
	pshb
	tsx
	ldab %1

	clra
	clrb
	pshb
	psha
	ldaa %1
=
	clrb
	pshb
	pshb
	ldaa %1

#
#	Clear and store then load after earlier optimisations
#
	clr %1
	clr %2
	clra
	clrb
	stab %3
	staa %4
	ldaa %5
	ldab %6
=
	clr %1
	clr %2
	clr %3
	clr %4
	ldaa %5
	ldab %6

	clr %1
	clr %2
	clra
	clrb
	stab %3
	staa %4
	clra
	ldab %5
=
	clr %1
	clr %2
	clr %3
	clr %4
	clra
	ldab %5

	clra
	pshb
	clra
=
	clra
	pshb

#
#	More addition rules
#
	ldaa %1
	ldab %2
	pshb
	psha
	tsx
	ldaa %3
	ldab %4
	addb $01,x
	adca $00,x
	ins
	ins
=
	ldaa %1
	ldab %2
	addb %3
	adca %4

#
#	Setting a static
#
	clra
	ldab #%1
	staa _%2
	stab _%2+1
	ldaa %3
=
	ldab #%1
	stab _%2
	clr _%2+1
	ldaa %3

#
#	Convoluted structure assignments
#
	pshb
	psha
	ldaa #$%1
	ldab #$%2
	staa @tmp2
	stab @tmp2+1
	pula
	pulb
	addb #$%3
	adca #$%4
	jsr dtoxstoretmp2
=
	addb #$%3
	adca #$%4
	ldx #$%1%2
	jsr dswapxstore

	pshb
	psha
	ldaa #$%1
	ldab #$%2
	staa @tmp2
	stab @tmp2+1
	pula
	pulb
	adda #$%3
	jsr dtoxstoretmp2
=
	adda #$%3
	ldx #$%1%2
	jsr dswapxstore

#
#	Make stack space and store constant - use push
#
	des
	des
	ldaa #%1
	ldab #%2
	jsr storetos
=
	ldaa #%1
	ldab #%2
	pshb
	psha

#
#	One of the few cases we can easily work via X
#
	ldaa %1,x
	ldab %1+1,x
	jsr dtox
	ldab %2,x
	ldaa %2+1,x
=
	ldx %1,x
	ldab %2,x
	ldaa %2+1,x

	jsr pshindxv%1
	ldaa #%1
	ldab #%2
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	ldx %1,x
	ldaa #%1
	ldab #%2
	staa %3,x
	stab %3+1,x

#
#	8bit initialize of a local into space just created
#
	des
	clra
	ldab #%1
	tsx
	stab $00,x
=
	ldab #%1
	pshb
	tsx

#
#	Some simple 8bit bool opts - bool* will set up A and B
#
	clra
	ldab %1
	cmpb %2
	jsr bool%3
=
	ldab %1
	cmpb %2
	jsr bool%3

#
#	Some more big patterns the compiler struggles with
#
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldaa %2
	ldab %3
	staa @sreg
	stab @sreg+1
	ldaa %4
	ldab %5
	jsr dopulx
=
	ldx _%1
	ldaa %2
	ldab %3
	staa @sreg
	stab @sreg+1
	ldaa %4
	ldab %5

	ldaa #>$%1
	ldab #<$%2
	pshb
	psha
	ldaa %3
	ldab %4
	staa @sreg
	stab @sreg+1
	ldaa %5
	ldab %6
	jsr dopulx
=
	ldx #$%1%2
	ldaa %3
	ldab %4
	staa @sreg
	stab @sreg+1
	ldaa %5
	ldab %6

	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	ldaa %2
	ldab %3
	staa @sreg
	stab @sreg+1
	ldaa %4
	ldab %5
	jsr dopulx
=
	ldx %1,x
	ldaa %2
	ldab %3
	staa @sreg
	stab @sreg+1
	ldaa %4
	ldab %5

#
#	Tidy up clears into structs
#
	clr @tmp2
	clr @tmp2+1
	addb #%1
	adca #%2
	jsr dtoxstoretmp2b
=
	addb #%1
	adca #%2
	jsr dtoxstorew0

	clr @tmp2
	clr @tmp2+1
	adda #%1
	jsr dtoxstoretmp2b
=
	adda #%1
	jsr dtoxstorew0

#
#	More X optimisations
#
	jsr loadtos
	pshb
	psha
	ldaa #%1
	ldab #%2
	jsr dopulx
	staa %3,x
	stab %3+1,x
=
	tsx
	ldx ,x
	ldaa #%1
	ldab #%2
	staa %3,x
	stab %3+1,x

	jsr loadtos
	pshb
	psha
	ldaa #%1
	tab
	jsr dopulx
	staa %2,x
	stab %2+1,x
=
	tsx
	ldx ,x
	ldaa #%1
	tab
	staa %2,x
	stab %2+1,x

	jsr loadtos
	pshb
	psha
	clra
	ldab #%1
	jsr dopulx
	staa %2,x
	stab %2+1,x
=
	tsx
	ldx ,x
	clra
	ldab #%1
	staa %2,x
	stab %2+1,x

	jsr loadtos
	pshb
	psha
	clra
	ldab #%1
	jsr dopulx
	staa %2,x
	stab %2+1,x
=
	tsx
	ldx ,x
	clra
	ldab #%1
	staa %2,x
	stab %2+1,x

	jsr loadtos
	pshb
	psha
	clra
	clrb
	jsr dopulx
	staa %2,x
	stab %2+1,x
=
	tsx
	ldx ,x
	clra
	clrb
	staa %2,x
	stab %2+1,x

#
#	Another form that seems to show up
#
	jsr loadtos
	pshb
	psha
=	
	jsr pushtop

#
#	Short form for pulxstb we can re-order
#
#	FIXME: earlier up match cases ending with a store on the dopulx then
#	invalidating so that we can avoid going via X versu ext address
#
	ldaa _%1
	ldab _%1+1
	pshb
	psha
	tsx
	ldab %2,x
	jsr dopulxstb
=
	tsx
	ldab %2-2,x
	ldx _%1
	stab ,x

	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldab #%2
	jsr dopulxstb
=
	ldab #%2
	ldx  _%1
	stab ,x

	ldaa _%1
	ldab _%1+1
	pshb
	psha
	tsx
	ldaa %2,x
	ldab %2+1,x
	jsr dopulx
=
	tsx
	ldaa %2-2,x
	ldab %2-1,x
	ldx _%1

	ldaa _%1
	ldab _%1+1
	pshb
	psha
	ldaa #%2
	ldab #%3
	jsr dopulx
=
	ldaa #%2
	ldab #%3
	ldx _%1

#
#	Some more maths compares we can cheat on a bit
#
	ldab %1
	tstb
	jsr bool%2
=
	tst %1
	jsr bool%2

#
#	Flag tests
#
	clra
	ldab %1
	andb %2
	staa @tmp1
	orab @tmp1
=
	ldab %1
	andb %2

	clra
	ldab %1
	andb %2
	jsr bnegax
=
	ldab %1
	andb %2
	jsr bnegax

#
#	Trivial for calls
#
	clra
	psha
	psha
	clra
=
	clra
	psha
	psha

#
#	Some cases we can go via X
#
	ldaa %1,x
	ldab %1+1,x
	pshb
	psha
	jsr dtoxclra
	ldab %2,x
	stab @tmp1
	incb
	jsr dopulx
	stab %2,x
	ldab @tmp1
=
	ldx %1,x
	clra
	ldab %2,x
	inc %2,x

#
#	Clear patterns of the above we can then squash a bit more
#
	tsx
	ldx %1,x
	clr %2,x
	clr %2+1,x
	tsx
	ldx %1,x
=
	tsx
	ldx %1,x
	clr %2,x
	clr %2+1,x

	tsx
	ldx %1,x
	clr %2,x
	tsx
	ldx %1,x
=
	tsx
	ldx %1,x
	clr %2,x

#
#	If we stored to top of stack and then reload that's pointless
#
	jsr storetos
	ldaa $00,x
	ldab $00+1,x
=
	jsr storetos

#
#	Increment of a byte indexed via computation
#
	pshb
	psha
	jsr dtoxclra
	ldab %1,x
	stab @tmp1
	incb
	jsr dopulx
	stab %1,x
	ldab @tmp1
=
	jsr dtoxclra
	ldab %1,x
	inc %1,x

#
#	Remove any post cleanup TSX dups
#
	tsx
	tsx
=
	tsx

	tsx
L%1:
	tsx
=
L%1:
	tsx

	ldaa %1
	ldab %1+1
	jsr dtox
=
	ldx %1
