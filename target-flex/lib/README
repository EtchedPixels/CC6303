; To commit once more useful

Still need to

- write a crt0 that parses the command line, switches stack etc
  (maybe does redirection ?)		DONE (minimal)
- make exit return via warmstart ?	DONE (minimal)


Have a libc variable __no_argv = 0 in its own object module, so the user can add
their own __no_argv linked first. Ditto for stdin/stdout (both word 0)

Actuall for __noargv we can have a module that is

__no_argv: .byte 0
then the parser subroutine and call it in crt0 as __no_argv+1 so it's not
referenced if the user has a no_argv

Stdio

FLEX FMS is neat, small but not that Unix. It also only does I/O to within
the 320 byte FCB. So we make the FCB part of the FILE object.

Probably need our own ascii->fcb func
add aliases for system 'devices' that set a flag and route those via
putch/getch

fopen			DONE (needs helpers)
	b	- turns off space compression
	
	r	- FMS function 1
	rb	- ditto but set 59,X to FF


	w	- FMS function 2
	wb	- 59,x again

	if 2 fails remove it and try again.



fclose			DONE

	FMS function 4



fseek to 0

rewind			DONE

	FMS function 5 (read only - write requires an error, or re-open)


unlink/remove		DONE (need helpers)
	FMS function 12 using the system fcb

rename
	FMS function 13 using the system fcb

fgetc			DONE (fix newline remap on ascii or console ?)
	FMS function 0
fputs			DONE
	FMS function 0 loop

fgets

fread/fwrite
	FMS function 0
	For binary we may be able to optimize on boundaries by using
	15 (next sequential sector) (note have to read one byte of prev
	sector for this to do anything)


opendir
	FMS function 6	DONE (needs helpers)
readdir			DONE
	FMS function 7
closedir		DONE
	FMS function 4

what do we do about printf/scanf stuff ?
