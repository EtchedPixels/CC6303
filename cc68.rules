#	Trim jumps to next instruction
	jmp %1
	%1:
=
	%1:

#	And terminal jsr rts
	jsr %1
	rts
=
	jmp %1

# Indirect function calls can go via x when we are loading the value
# from a target just before the branch
	ldd %1
	xgdx
	jsr ,x
=
	ldx %1
	jsr ,x


# Double exchanges
	xgdx; XtoD
	xgdx; DtoX
=
	;

# Double exchanges
	xgdx
	xgdx
=
	;

# Double push of constant
# We could also do static but we have no visibility into volatiles yet
	ldx #%1
	pshx
	ldx #%1
=
	ldx #%1
	pshx

	ldx @%1
	pshx
	ldx @%1
=
	ldx @%1
	pshx

# int foo = something; func(foo, ....)
	pshx
	;invalid XDP
	tsx
	ldx $01,x
	pshx
=
	pshx
	pshx

# Silly logic removals
	ldd @one
	staa @tmp1
	orab @tmp1
	jne %1
=
	ldd @one
	jne %1

# Some trivial optimizations for clra/clrb cases
	ldd @one
	stab %1
	clra
	clrb
=
	ldd @one
	stab %1
	decb

	clra
	clrb
	stab %1
	clra
	clrb
=
	clra
	clrb
	stab %1

	ldd @one
	std %1
	clra
	clrb
=
	ldd @one
	std %1
	decb

	clra
	clrb
	std %1
	clra
	clrb
=
	clra
	clrb
	std %1

# And with D,P
	clra
	clrb
	stab %1
	;invalid DP
	clra
	clrb
=
	clra
	clrb
	stab %1
	;invalid DP

	ldd @one
	std %1
	;invalid DP
	clra
	clrb
=
	ldd @one
	std %1
	decb
	;invalid DP

	clra
	clrb
	std %1
	;invalid DP
	clra
	clrb
=
	clra
	clrb
	std %1
	;invalid DP

# And with X,D,P
	clra
	clrb
	stab %1
	;invalid XDP
	clra
	clrb
=
	clra
	clrb
	stab %1
	;invalid XDP

	ldd @one
	std %1
	;invalid XDP
	clra
	clrb
=
	ldd @one
	std %1
	decb
	;invalid XDP

	clra
	clrb
	std %1
	;invalid XDP
	clra
	clrb
=
	clra
	clrb
	std %1
	;invalid XDP

	clra
	clra
=
	clra

	clrb
	pshb
	;invalid DP
	clrb
	pshb
=
	clrb
	pshb
	pshb
	;invalid DP

	clra
	pshb
	;invalid DP
	clra
=
	clra
	pshb
	;invalid DP

	clra
	clrb
	std %1
	;invalid DP
	clra
	clrb
=
	clra
	clrb
	std %1
	;invalid DP

	clra
	clrb
	std %1
	;invalid XDP
	clra
	clrb
=
	clra
	clrb
	std %1
	;invalid XDP

# Similar idea for constants
	ldab #%1
	pshb
	;invalid DP
	ldab #%1
=
	ldab #%1
	pshb
	;invalid DP

# Where logic tells us clr is not needed
	subd %1
	jne %2
	clra
=
	subd %1
	jne %2

# Make exchange and push more efficient
	xgdx; XtoD
	pshb
	psha
=
	pshx
	xgdx; XtoD

	xgdx; DtoX
	pshb
	psha
=
	pshx
	xgdx; XtoD

# Useful overlaps to spot
	clrb
	pshb
	ldab #$FF
=
	clrb
	pshb
	decb

# Push of postinc/dec static/global
	stx _%1
	dex
	stx @tmp
	ldd @tmp
	ldd _%1
	pshb
	psha
	invalid X,D,P
=
	stx _%1
	pshx

	stx _%1
	inx
	stx @tmp
	ldd @tmp
	ldd _%1
	pshb
	psha
	invalid X,D,P
=
	stx _%1
	pshx

# Store and reload
	std %1
	ldd %1
=
	std %1

	stx %1
	ldx %1
=
	stx %1

	std %1
	invalid D,P
	ldd %1
=
	std %1

	std %1
	invalid X,D,P
	ldd %1
=
	std %1

# Some classes of compare
# Simple check on 8bit versus 0 (safe only due to compiler behaviour)
	clra
	ldab %1
	jne %2
	L%3
	ldd %4
=
	ldab %1
	jne %2
	L%3
	ldd %4

	clra
	ldab %1
	jne %2
	ldd %3
=
	ldab %1
	jne %2

# Pointless stack
	pshb
	pulb
=
	;

	pshx
	pulx
=
	;

	pshb
	psha
	pula
	pulb
=
	;

	pula
	pulb
	pshb
	psha
	ldd %1
=
	ldd %1

	pula
	pulb
	pshb
	psha
	clra
	ldab %1
=
	clra
	ldab %1

	pula
	pulb
	pshb
	psha
	clra
	clrb
=
	clra
	clrb

#	Turn pula/pulb/xgdx into pulx. This should be safe without a check
#	we then load D but might need a hint adding
	pula
	pulb
	xgdx; DtoX
=
	pulx

#	DP optimized constants
#
	clra
	ldab #$01
=
	ldd @one

	addd #$0001
=
	addd @one

#	Branches
#

	%1:
		jmp %2
	%3:
		jmp %1
=
	%1:
	%3:
		jmp %2

# Review more conditions
	jne %1
	jmp %2
	%1:
=
	jeq %2
	%1:

	jeq %1
	jmp %2
	%1:
=
	jne %2
	%1:

	jcc %1
	jmp %2
	%1:
=
	jcs %2
	%1:

	jcs %1
	jmp %2
	%1:
=
	jcc %2
	%1:


# Fix up some of the X cases
# Push and then invalidate D so can use X
	ldd %1
	pshb
	psha
	invalid X,D,P
=
	ldx %1
	pshx
	invalid X,D,P

# Push and then invalidate D so can use X single arg entry, with label
	ldd %1
	pshb
	psha
	%2:
	invalid X,D,P
=
	ldx %1
	pshx
	%2:
	invalid X,D,P

# Stack via X
	ldd %1
	pshb
	psha
	invalid X,D,P
=
	ldx %1
	pshx

# Stack via X when there is a further argument stacked via X which does
# not use X (either constant or static (# or _)). We cannot do this for
# locals as they will use ,x in the second load and a tsx is no cheaper
# we can't easily do this for all combinations unfortunately because
# we also need to check there are no ,x dependencies further down the chain
# until we hit the jsr _func
#
# TODO: add @zero and @one match forms ditto clra/clrb ones ?
#
# func(arg,const)
	ldd %1
	pshb
	psha
	invalid D,P
	ldd #%2
	pshb
	psha
	invalid D,P
	jsr _%3
=
	ldx %1
	pshx
	ldx #%2
	pshx
	invalid D,P
	jsr _%3

# func(arg, static)
	ldd %1
	pshb
	psha
	invalid D,P
	ldd _%2
	pshb
	psha
	invalid D,P
	jsr _%3
=
	ldx %1
	pshx
	ldx _%2
	pshx
	invalid D,P
	jsr _%3

# func(arg, const, const)
	ldd %1
	pshb
	psha
	invalid D,P
	ldd #%2
	pshb
	psha
	invalid D,P
	ldd #%3
	pshb
	psha
	invalid D,P
	jsr _%4
=
	ldx %1
	pshx
	ldx #%2
	pshx
	ldx #%3
	pshx
	invalid D,P
	jsr _%4

# func(arg, const, static)
	ldd %1
	pshb
	psha
	invalid D,P
	ldd #%2
	pshb
	psha
	invalid D,P
	ldd _%3
	pshb
	psha
	invalid D,P
	jsr _%4
=
	ldx %1
	pshx
	ldx #%2
	pshx
	ldx _%3
	pshx
	invalid D,P
	jsr _%4

# func(arg, static, const)
	ldd %1
	pshb
	psha
	invalid D,P
	ldd _%2
	pshb
	psha
	invalid D,P
	ldd #%3
	pshb
	psha
	invalid D,P
	jsr _%4
=
	ldx %1
	pshx
	ldx _%2
	pshx
	ldx #%3
	pshx
	invalid D,P
	jsr _%4

# func(arg, static, static)
	ldd %1
	pshb
	psha
	invalid D,P
	ldd _%2
	pshb
	psha
	invalid D,P
	ldd _%3
	pshb
	psha
	invalid D,P
	jsr _%4
=
	ldx %1
	pshx
	ldx _%2
	pshx
	ldx _%3
	pshx
	invalid D,P
	jsr _%4

# Stack via X when X is live but we are calling a user function so _xyz
	ldd %1
	pshb
	psha
	invalid D,P
	jsr _%2
=
	ldx %1
	pshx
	;invalid DP
	jsr _%2

# Stack via X because we can see a non X dependent X load following
	ldd %1
	pshb
	psha
	ldx @%2
=
	ldx %1
	pshx
	ldx @%2

	ldd %1
	pshb
	psha
	ldx _%2
=
	ldx %1
	pshx
	ldx _%2

	ldd %1
	pshb
	psha
	ldx #%2
=
	ldx %1
	pshx
	ldx #%2


# Clean up trailing references from things like p++;
	ldd %1
	L%2
	ldd %3
=
	L%2
	ldd %3

	ldd %1
	ldd %2
=
	ldd %2

# n++/n-- with unused result
	ldd %1
	pshb
	psha
	addd %2
	std %1
	pula
	pulb
	ldd %3
=
	ldd %1
	addd %2
	std %1
	ldd %3

# Optimize a few pull sequences where we can see X is not live
	pula
	pulb
	L%1:
	tsx
=
	pulx
	L%1:
	tsx

	pula
	pulb
	tsx
=
	pulx
	tsx

	pula
	pulb
	pulx
=
	pulx
	pulx

	pula
	pulb
	invalid X,D,P
=
	pulx
	;invalid XDP

	ldd %1
	pshb
	psha
	tsx
	ldd %2
=
	ldx %1
	pshx
	tsx
	ldd %2

# Clean up invalid markers
	invalid D,P
=
	;invalid DP

	invalid X,D,P
=
	;invalid XDP

# Some useful tricks with comparisons. Where the comparison sets the flags
# and the next thing we do is to do a conditional based on them we can
# eliminate the test function. Look at the others as we clean them up
# in the compiler
	jsr booleq
	jeq %1
=
	jne %1

	jsr boolne
	jne %1
=
	jne %1

# Clean up tsx tsx

	tsx
	tsx
=
	tsx

# We have a more general issue of cases where we shouldn't go via the
# stack at all to address - eg 16bit compare with static. Until we fix
# the compiler address them here
	ldd %1
	pshb
	psha
	ldd %2
	tsx
	subd $00,x
	pulx
=
	ldd %2
	subd %1

	ldd %1
	pshb
	psha
	ldd %2
	tsx
	addd $00,x
	pulx
=
	ldd %1
	addd %2

	ldd %1
	pshb
	psha
	ldd %2
	subd $00,x
	pulx
=
	ldd %2
	subd %1

	ldd %1
	pshb
	psha
	ldd %2
	addd $00,x
	pulx
=
	ldd %1
	addd %2

# re-order constant subtract
	ldx %1
	pshx
	ldd #%2
	tsx
	std @tmp
	ldd $00,x
	pulx
	subd @tmp
=
	ldd %1
	subd #%2

	ldx %1
	pshx
	ldd @one
	tsx
	std @tmp
	ldd $00,x
	pulx
	subd @tmp
=
	ldd %1
	subd @one

# re-order constant add
	ldx %1
	pshx
	ldd #%2
	tsx
	std @tmp
	ldd $00,x
	pulx
	subd @tmp
=
	ldd %1
	subd #%2

	ldx %1
	pshx
	ldd @one
	tsx
	std @tmp
	ldd $00,x
	pulx
	subd @tmp
=
	ldd %1
	subd @one

# re-order some assignments of constant to computed address
# Can't do this for locals (we need X then)
# Int versions then char versions
	ldd %1
	pshb
	psha
	ldd #%2
	pulx
	std %3
=
	ldx %1
	ldd #%2
	std %3

	ldd %1
	pshb
	psha
	ldd @%2
	pulx
	std %3
=
	ldx %1
	ldd @%2
	std %3

	ldd %1
	pshb
	psha
	ldd _%2
	pulx
	std %3
=
	ldx %1
	ldd _%2
	std %3

	ldd %1
	pshb
	psha
	ldd #%2
	pulx
	stab %3
=
	ldx %1
	ldd #%2
	stab %3

	ldd %1
	pshb
	psha
	ldd @%2
	pulx
	stab %3
=
	ldx %1
	ldd @%2
	stab %3

	ldd %1
	pshb
	psha
	ldd _%2
	pulx
	stab %3
=
	ldx %1
	ldd _%2
	stab %3

# Spot logic operations where we can use x to avoid going over the stack
# We can't handle all cases because if the second op is ,x then we lose
	ldd %1
	pshb
	psha
	ldd #%2
	tsx
=
	ldx %1
	pshx
	ldd #%2
	tsx

	ldd %1
	pshb
	psha
	ldd _%2
	tsx
=
	ldx %1
	pshx
	ldd _%2
	tsx

# Repeat clears for 8bit work
	clra
	ldab %1
	clra
=
	clra
	ldab %1

	clra
	clrb
	stab %1
	tsx
	ldd %2
=
	clrb
	stab %1
	tsx
	ldd %2

	clra
	clrb
	stab %1
	ldd %2
=
	clrb
	stab %1
	ldd %2

	clra
	clrb
	stab %1
	ldd %2
=
	clrb
	stab %1
	ldd %2

# Pointer chases that can use X directly
	ldd %1
	std @tmp
	ldx @tmp
	ldd %2
=
	ldx %1
	ldd %2

	ldd %1
	std @tmp
	ldx @tmp
	clra
	ldab%2
=
	ldx %1
	clra
	ldab %2

	ldd %1
	pshb
	psha
	std @tmp
	ldx @tmp
	clra
	ldab %2
=
	ldx %1
	pshx
	clra
	ldab %2

	ldd %1
	pshb
	psha
	tsx
	clra
	ldab %2
	pulx
	stab %3
=
	ldx %1
	pshx
	tsx
	clra
	ldab %2
	pulx
	stab %3

	ldd %1
	pshb
	psha
	tsx
	ldd %2
	pulx
	std %3
=
	ldx %1
	pshx
	tsx
	ldd %2
	pulx
	std %3

	ldd %1
	pshb
	psha
	clra
	clrb
	pulx
=
	ldx %1
	clra
	clrb

# Byte increments
	ldd @one
	addb %1
	stab %1
=
	inc %1
	ldab %1
	clra

# Call cleanups(no internal X using helpers start with an underscore) 
	ldd %1
	pshb
	psha
	jsr _%2
=
	ldx %1
	pshx
	jsr _%2

# Post inc/dec cleanup for unused values
	dex
	stx @tmp
	ldd @tmp
	invalid X,D,P
=
	;dropped postdec

	inx
	stx @tmp
	ldd @tmp
	invalid X,D,P
=
	;dropped postinc

# Ditto when stacking
